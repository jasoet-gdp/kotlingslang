buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinGradleVersion}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${bintrayGradleVersion}"
    }
}

apply plugin: 'kotlin'
apply plugin: "jacoco"
apply plugin: 'com.jfrog.bintray'

repositories {
    mavenCentral()
    maven { url 'http://oss.sonatype.org/content/repositories/snapshots' }
}

jacoco {
    toolVersion = "${jacocoToolVersion}"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

check.dependsOn jacocoTestReport

dependencies {
    compile "org.jetbrains.kotlin:kotlin-jdk-annotations:${kotlinJdkAnnotationVersion}"
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinGradleVersion}"
    testCompile "org.jetbrains.kotlin:kotlin-test:${kotlinGradleVersion}"
    testCompile("org.assertj:assertj-core:${assertJVersion}")
    testCompile("junit:junit:${junitVersion}")
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar
}


bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'org.kotlinslang'
        name = 'kotlinslang'
        desc = "A functional library for Kotlin that provides functional control structures."
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/jasoet-gdp/kotlinslang.git'
        issueTrackerUrl = 'https://github.com/jasoet-gdp/kotlinslang/issues'
        labels = ['kotlin', 'functional', 'control']
        publicDownloadNumbers = true
        version {
            name = "${project.version}"
            desc = "Kotlinslang version ${project.version}, Need More Test!."
            vcsTag = "${project.version}"
        }
    }
}
task wrapper(type: Wrapper) {
    gradleVersion = "2.13"
}